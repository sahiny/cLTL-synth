function [fF,phiF] = getGF2(formula, args, k)

global Mw Z zLoop ZLoop bigM epsilon;


if length(args)~=1
    disp('GF(eventually) takes a single argument')
    assert(length(args)==1)
end


    ZAnd = [];
    z = [];
    for i=1:k
       % za_i = << phi1 U phi2 >>_i 
       [fF,zi] = getLTL(args{1},k);
       z = [z;zi];
       
       % zb_i = And(zLoop_i,za_i)
       formulaAnd = strcat('And(', ...
                    'ZLoop', '[',num2str(i),'],', ...
        num2str(args{1}), '[',num2str(i),'])');
       zAnd = getZ(formulaAnd,-1);
       ZAnd = [ZAnd;zAnd];
       fF = [fF, ZAnd(i)<=z(i), ZAnd(i)<=ZLoop(i), ZAnd(i)>=z(i)+zLoop(i)-1];
           
    end
    % bigOr, see eq (15) in paper
    zOr = getZ(formulaOr,-1);
    fF = [fF, zOr<=sum(ZAnd), repmat(zOr,k,1)>=ZAnd];
    
    % finally (15)
    phiF = getZ(formula,k);
    fF = [fF, phiF<=zOr+phi2, phiF>=phi2, phiF>=zOr];
    
    % aux variables see (16)
    for i=1:k-1
        
        phi2_i = getZ(args{1},i);
        fF = [fF, za(i)<=za(i+1)+phi2_i, za(i)>=phi2_i, za(i)>=za(i+1)];
        
    end

    % Last step
    phi2_k = getZ(args{1},k);
    fF = [fF, za(k)==phi2_k];
    
end
    